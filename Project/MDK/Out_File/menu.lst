C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE menu
OBJECT MODULE PLACED IN .\Out_File\menu.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE menu.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..
                    -\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\US
                    -ER\src) DEBUG PRINT(.\Out_File\menu.lst) OBJECT(.\Out_File\menu.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2023,Alaye_Dong
    4           * All rights reserved
    5           *
    6           * 以下所有内容版权均属Alaye_Dong所有，未经允许不得用于 商业用途，
    7           * 欢迎各位使用并传播本程序，修改内容时必须保留Alaye_Dong的版权声明。
    8           *
    9           * @file                menu
   10           * @author              Alaye_Dong(QQ2971731849)
   11           * @Software            MDK FOR C251 V5.60
   12           * @Target core         STC32G12K128
   13           * @date                2023-7-28
   14           * @note            为观察屏幕舒适修改了_SEEKFREE_FONT_h中WHITE的宏定义，实际为黑色
   15           ********************************************************************************************************
             -*************/
   16          
   17          #include "menu.h"
   18          
   19          //定义按键代号
   20          #define KeystrokeONE 1
   21          #define KeystrokeTWO 2
   22          #define KeystrokeTHREE 3
   23          #define KeystrokeFOUR 4
   24          
   25          #define RowsMax 7 //光标在屏幕上可移动至的最大行数
   26          #define RowsMin 1 //光标在屏幕上可移动至的最小行数
   27          #define CenterColumn 10*8   //中央列
   28          #define EEPROM_MODE 1 //eeporm读写开启则为1
   29          
   30          int Display_Codename = 0;    //显示页面代号
   31          uint8 KeystrokeLabel = 0;   //按压状态
   32          uint8 CursorRow= 0; //光标所在行号
   33          uint8 MenuNextFlag = 0; //光标所指菜单进入标志位
   34          float change_unit = 0;  //单次修改的单位值
   35          
   36          //需要被修改的参数示例
   37          int Start_Flag = 0,garage_out_direction = 0;
   38          float PID_P = 0.123, PID_D = 0.123;
   39          int normal_speed = 0;
   40          
   41          //将有菜单页面的代号填入该数组中，防止由箭头所在行号所决定进入不存在的菜单
   42          int menu_have_sub[] =  {
   43                                      0,
   44                                      1, 11, 12,
   45                                      2, 21 ,22, 23
   46                                 };
   47          
   48          //菜单箭头标识                       
   49          void Cursor(void)
   50          {               
   51   1          uint8 i;
   52   1          MenuNextFlag = 0;
   53   1      
   54   1          Keystroke_Scan();
   55   1      
C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 2   

   56   1          switch(KeystrokeLabel)
   57   1          {
   58   2              case 1:
   59   2                      CursorRow--;
   60   2                      break;                   
   61   2              case 2:
   62   2                      CursorRow++;
   63   2                      break;                    
   64   2              case 3:
   65   2                      MenuNextFlag = 1;
   66   2                      break;
   67   2              case 4:
   68   2                      MenuNextFlag = -1;
   69   2                      break;                    
   70   2          }
   71   1          //箭头限位
   72   1          if (CursorRow < RowsMin)
   73   1          {
   74   2              CursorRow= RowsMin;
   75   2          }
   76   1          else if (CursorRow > RowsMax)
   77   1          {
   78   2              CursorRow= RowsMin;
   79   2          } 
   80   1          //箭头打印
   81   1          for (i = 0; i <= 7; i++)
   82   1          {
   83   2              if(i == CursorRow)
   84   2              {
   85   3                  lcd_showstr(0, CursorRow, ">");
   86   3              }
   87   2              else
   88   2              {
   89   3                  lcd_showstr(0, i, " ");
   90   3              }
   91   2          }
   92   1      
   93   1      }
   94          
   95          //菜单上下级跳转
   96          void Menu_Next_Back()
   97          {
   98   1          switch(MenuNextFlag)
   99   1          {
  100   2              case 0:
  101   2                      break;
  102   2              
  103   2              case -1:    //返回上一级
  104   2                      Display_Codename = Display_Codename / 10;
  105   2                      CursorRow = 0;
  106   2                      lcd_clear(WHITE);
  107   2                      break;
  108   2              case 1:     //进入下一级
  109   2                      if(have_sub_menu(Display_Codename*10 + CursorRow))
  110   2                      {
  111   3                          Display_Codename = Display_Codename*10 + CursorRow;
  112   3                          CursorRow = 0;
  113   3                          lcd_clear(WHITE);
  114   3                      }
  115   2      
  116   2                      break;
  117   2          }
  118   1          
  119   1          MenuNextFlag = 0;   //切换完页面，标志位归0
  120   1      }
  121          
C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 3   

  122          // 检查本行是否存在子菜单
  123          int have_sub_menu(int menu_id) 
  124          {   
  125   1          int i = 0;
  126   1          int len = sizeof(menu_have_sub) / sizeof(menu_have_sub [0]);
  127   1          for (i = 0; i <= len; i++)
  128   1          {
  129   2              if (menu_have_sub[i] == menu_id)
  130   2              {
  131   3                  return 1;
  132   3              }
  133   2          }
  134   1          return 0;
  135   1      }
  136          
  137          //整型参数修改
  138          void Keystroke_int(int* parameter, int change_unit_MIN)
  139          {
  140   1          change_unit = change_unit_MIN;  //修改单位值 = 最小修改单位值
  141   1          Keystroke_Scan();
  142   1          
  143   1          //通过两个拨码开关来切换修改单位值
  144   1          if (sw1_status == 0)
  145   1          {
  146   2              change_unit = change_unit_MIN * 10; 
  147   2              if (sw2_status == 0)
  148   2              {
  149   3                  change_unit = change_unit_MIN * 100; 
  150   3              }        
  151   2          }
  152   1          
  153   1          switch(KeystrokeLabel)
  154   1          {
  155   2              case 0 :
  156   2                      break;
  157   2                          
  158   2              case KeystrokeONE :
  159   2                      *parameter += change_unit;      
  160   2                      break;
  161   2              case KeystrokeTWO :
  162   2                      *parameter -= change_unit;                      
  163   2                      break;
  164   2                          
  165   2              case KeystrokeTHREE :
  166   2                      Display_Codename /= 10; //返回上一页
  167   2                      lcd_clear(WHITE);
  168   2                      break;
  169   2              case KeystrokeFOUR :
  170   2                      Display_Codename = 0;   //返回第0页
  171   2                      lcd_clear(WHITE);
  172   2                      break;
  173   2          }
  174   1      
  175   1      }
  176          
  177          //浮点型参数修改
  178          void Keystroke_float(float* parameter, float change_unit_MIN)
  179          {
  180   1          change_unit = change_unit_MIN;  //修改单位值 = 最小修改单位值
  181   1          Keystroke_Scan();
  182   1          
  183   1          //通过两个拨码开关来切换修改的单位值
  184   1          if (sw1_status == 0)
  185   1          {
  186   2              change_unit = change_unit_MIN * 10; 
  187   2              if (sw2_status == 0)
C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 4   

  188   2              {
  189   3                  change_unit = change_unit_MIN * 100; 
  190   3              }        
  191   2          }
  192   1          
  193   1          switch(KeystrokeLabel)
  194   1          {
  195   2              case 0 :
  196   2                      break;
  197   2                          
  198   2              case KeystrokeONE :
  199   2                      *parameter += change_unit;      
  200   2                      break;
  201   2              case KeystrokeTWO :
  202   2                      *parameter -= change_unit;                      
  203   2                      break;
  204   2                          
  205   2              case KeystrokeTHREE :
  206   2                      Display_Codename /= 10; //返回上一页
  207   2                      lcd_clear(WHITE);
  208   2                      break;
  209   2              case KeystrokeFOUR :
  210   2                      Display_Codename = 0;   //返回第0页
  211   2                      lcd_clear(WHITE);
  212   2                      break;
  213   2          }
  214   1      
  215   1      }
  216          
  217          
  218          //整型特值修改，-1或1
  219          void Keystroke_Special_Value(int* parameter)
  220          {
  221   1          Keystroke_Scan();
  222   1          switch(KeystrokeLabel)
  223   1          {                
  224   2              case KeystrokeONE :
  225   2                      *parameter = -1;        
  226   2                      break;
  227   2              case KeystrokeTWO :
  228   2                      *parameter = 1; 
  229   2                      break;
  230   2                      
  231   2              case KeystrokeTHREE :
  232   2                      Display_Codename /= 10; //返回上一页
  233   2                      lcd_clear(WHITE);
  234   2                      break;
  235   2              case KeystrokeFOUR :
  236   2                      Display_Codename = 0;   //返回第0页
  237   2                      lcd_clear(WHITE);
  238   2                      break;
  239   2          }
  240   1      }
  241          
  242          
  243          
  244          //-------------------------------------------------------------------------------------------------------
             -------------
  245          //  @brief      菜单目录
  246          //  @param
  247          //  @return     void
  248          //  @note       启用while来显示目标页面  在每个页面按键按键后都会改变到对应页面，此函数用于更新屏幕显示  
             -      
  249          //             增删页的同时请记得同步修改menu_have_sub[]数组的值
  250          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 5   

  251          void Keystroke_Menu(void)
  252          {
  253   1          switch(Display_Codename)
  254   1          {
  255   2              case 0:
  256   2                  Keystroke_Menu_HOME();
  257   2                  break;
  258   2                  
  259   2              case 1:
  260   2                  Keystroke_Menu_ONE(); 
  261   2                  break;
  262   2              case 11:
  263   2                  Keystroke_Menu_ONE_One();
  264   2                  break;
  265   2              case 12:
  266   2                  Keystroke_Menu_ONE_Two();
  267   2                  break;
  268   2                  
  269   2              case 2:
  270   2                  Keystroke_Menu_TWO();
  271   2                  break;
  272   2              case 21:
  273   2                  Keystroke_Menu_TWO_One();
  274   2                  break;
  275   2              case 22:
  276   2                  Keystroke_Menu_TWO_Two();
  277   2                  break;
  278   2              case 23:
  279   2                  Keystroke_Menu_TWO_Three();
  280   2                  break;
  281   2      
  282   2              default :
  283   2                  break;
  284   2          
  285   2          }
  286   1      }
  287          
  288          //-------------------------------------------------------------------------------------------------------
             -------------
  289          //  @brief      主菜单目录
  290          //  @param
  291          //  @return     void
  292          //  @note       此页面为编号为0
  293          //-------------------------------------------------------------------------------------------------------
             -------------
  294          void Keystroke_Menu_HOME(void)    //0
  295          {
  296   1          while(MenuNextFlag == 0)
  297   1          {
  298   2              lcd_showstr(CenterColumn - 2*8,0,"MENU");
  299   2              lcd_showstr(1*8,1,"STRAT");
  300   2              lcd_showstr(1*8,2,"PID_SPEED");
  301   2              
  302   2              Cursor(); 
  303   2          }
  304   1          
  305   1          if(MenuNextFlag == 1 && have_sub_menu(CursorRow))   //进入下一级菜单
  306   1          {
  307   2              Display_Codename = CursorRow;
  308   2              CursorRow = 0;
  309   2              lcd_clear(WHITE);
  310   2          }
  311   1          
  312   1          else if(MenuNextFlag == -1 && EEPROM_MODE == 1) //在主菜单时按下回退键（按键4）来进行eeprom确认刷写
  313   1          {
  314   2              eeprom_flash();
C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 6   

  315   2              
  316   2              //刷写完成提示
  317   2              lcd_clear(WHITE);
  318   2              lcd_showstr(1*8,1,"EEPROM_SAVED");
  319   2              lcd_showstr(1*8,4,"@author Alaye_Dong");    //用了就别删.doge！！！
  320   2      
  321   2              delay_ms(400);
  322   2              BEEP = 1;
  323   2              delay_ms(100);
  324   2              BEEP = 0;
  325   2              lcd_clear(WHITE);
  326   2          }
  327   1          
  328   1          MenuNextFlag = 0;   //切换完页面，标志位归0
  329   1      }
  330          
  331          /*///////////////////////////////////////
  332              Start
  333          *////////////////////////////////////////
  334          void Menu_ONE_Display(uint8 control_line)
  335          {
  336   1          lcd_showstr(CenterColumn - 2*8,0,"STRAT");
  337   1          lcd_showstr(1*8,1,"Start_Flag");
  338   1          lcd_showstr(1*8,2,"Out_Direction");
  339   1      
  340   1          lcd_showint32(14*8,1,Start_Flag,3);
  341   1          lcd_showint32(14*8,2,garage_out_direction,3);
  342   1      
  343   1          lcd_showstr(0,control_line,"&"); //&标志提示
  344   1      }
  345          
  346          void Keystroke_Menu_ONE(void) //1
  347          {       
  348   1          while(MenuNextFlag == 0)
  349   1          {
  350   2              Menu_ONE_Display(-1);
  351   2              Cursor();
  352   2          }
  353   1          Menu_Next_Back();
  354   1      }
  355          
  356          void Keystroke_Menu_ONE_One(void)  //11
  357          {               
  358   1          Menu_ONE_Display(1);
  359   1          Keystroke_Special_Value(&Start_Flag);
  360   1      }
  361          
  362          void Keystroke_Menu_ONE_Two(void)  //12
  363          {               
  364   1          Menu_ONE_Display(2);
  365   1          Keystroke_Special_Value(&garage_out_direction);
  366   1      }
  367          
  368          /*////////////////////////////////////
  369              PD
  370          *////////////////////////////////////
  371          void Menu_TWO_Display(uint8 control_line)
  372          {
  373   1          lcd_showstr(CenterColumn - 4*8,0,"PID_SPEED");
  374   1          lcd_showstr(1*8,1,"P");
  375   1          lcd_showstr(1*8,2,"D");
  376   1          lcd_showstr(1*8,3,"normal_speed");
  377   1      
  378   1          lcd_showfloat(14*8,1,PID_P,2,3);
  379   1          lcd_showfloat(14*8,2,PID_D,2,3);
  380   1          lcd_showint32(14*8,3,normal_speed,3);
C251 COMPILER V5.60.0,  menu                                                               02/08/23  09:20:22  PAGE 7   

  381   1      
  382   1          lcd_showstr(0,control_line,"&"); //&标志提示
  383   1      }
  384          
  385          void Keystroke_Menu_TWO(void) //2
  386          {       
  387   1          while(MenuNextFlag == 0)
  388   1          {
  389   2              Menu_TWO_Display(-1);
  390   2              Cursor();
  391   2          }
  392   1          Menu_Next_Back();
  393   1      }
  394          
  395          void Keystroke_Menu_TWO_One(void) //21
  396          {
  397   1          Menu_TWO_Display(1);
  398   1          Keystroke_float(&PID_P, 0.001);
  399   1      }
  400          void Keystroke_Menu_TWO_Two(void)  //22
  401          {
  402   1          Menu_TWO_Display(2);
  403   1          Keystroke_float(&PID_D, 0.001);
  404   1      }
  405          void Keystroke_Menu_TWO_Three(void)  //23
  406          {
  407   1          Menu_TWO_Display(3);
  408   1          Keystroke_int(&normal_speed,1);
  409   1      }
  410          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1592     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        66     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       184     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
